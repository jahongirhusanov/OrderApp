[{"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/index.js":"1","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/App.js":"2","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Layout/Layout.jsx":"3","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/SideNavbar/MiniDrawer.jsx":"4","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/SideNavbar/MenuList.jsx":"5","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/Routing.js":"6","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Orders/OrderItems.jsx":"7","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Products/ProductItems.jsx":"8","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Settings/SettingItems.jsx":"9","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Feedback/Feedback.jsx":"10","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Orders/MaterialTableSample.jsx":"11","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Orders/OrderStatus.jsx":"12","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Products/Category.jsx":"13","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Products/ProductList.jsx":"14","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Category/CategoryList.jsx":"15","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Store/StoreList.jsx":"16","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Stores/StoreItems.jsx":"17","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/SignIn/SignIn.jsx":"18"},{"size":146,"mtime":1607140572955,"results":"19","hashOfConfig":"20"},{"size":327,"mtime":1607380162689,"results":"21","hashOfConfig":"20"},{"size":167,"mtime":1607141677723,"results":"22","hashOfConfig":"20"},{"size":5318,"mtime":1607203148015,"results":"23","hashOfConfig":"20"},{"size":792,"mtime":1607200197343,"results":"24","hashOfConfig":"20"},{"size":1428,"mtime":1607729791132,"results":"25","hashOfConfig":"20"},{"size":742,"mtime":1607490385774,"results":"26","hashOfConfig":"20"},{"size":683,"mtime":1607728545717,"results":"27","hashOfConfig":"20"},{"size":178,"mtime":1607194678012,"results":"28","hashOfConfig":"20"},{"size":262,"mtime":1607196586608,"results":"29","hashOfConfig":"20"},{"size":3176,"mtime":1607571783666,"results":"30","hashOfConfig":"20"},{"size":3993,"mtime":1607489418757,"results":"31","hashOfConfig":"20"},{"size":184,"mtime":1607728545717,"results":"32","hashOfConfig":"20"},{"size":10306,"mtime":1607728548915,"results":"33","hashOfConfig":"20"},{"size":9260,"mtime":1607728597321,"results":"34","hashOfConfig":"20"},{"size":10129,"mtime":1607729015128,"results":"35","hashOfConfig":"20"},{"size":421,"mtime":1607729044957,"results":"36","hashOfConfig":"20"},{"size":1942,"mtime":1607729427160,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1tgiurx",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/index.js",[],["78","79"],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/App.js",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Layout/Layout.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/SideNavbar/MiniDrawer.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/SideNavbar/MenuList.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/Routing.js",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Orders/OrderItems.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Products/ProductItems.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Settings/SettingItems.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Feedback/Feedback.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Orders/MaterialTableSample.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Orders/OrderStatus.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Products/Category.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Products/ProductList.jsx",["80","81","82","83"],"import React, { useState, useEffect } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport axios from 'axios'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Modal from '@material-ui/core/Modal'\r\nimport Button from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\n\r\nconst baseURL = 'http://localhost:5000'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icons: {\r\n    cursor: 'pointer',\r\n  },\r\n  inputMaterial: {\r\n    marginTop: 20,\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    fontWeight: 'bold',\r\n  },\r\n}))\r\n\r\nexport default function ProductList() {\r\n  const styles = useStyles()\r\n  const [data, setData] = useState([])\r\n  const [categoryData, setCategoryData] = useState([])\r\n  const [open, setOpen] = useState(false)\r\n  const [createDialog, setCreateDialog] = useState(false)\r\n  const [updateDialog, setUpdateDialog] = useState(false)\r\n  const [deleteDialog, setDeleteDialog] = useState(false)\r\n  const [saveButton, setSaveButton] = useState(true)\r\n\r\n  const [createProduct, setCreateProduct] = useState({\r\n    title: '',\r\n    category: '',\r\n    price: 0,\r\n  })\r\n\r\n  useEffect(() => {\r\n    getProducts()\r\n    getCategory()\r\n  }, [])\r\n  // Get category list\r\n  const getCategory = async () => {\r\n    await axios\r\n      .get(baseURL + '/category')\r\n      .then((res) => {\r\n        setCategoryData(res.data)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n  //   Get Products\r\n  const getProducts = async () => {\r\n    await axios\r\n      .get(baseURL + '/products')\r\n      .then((res) => {\r\n        setData(res.data)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n  //   Post Products\r\n  const postProduct = async () => {\r\n    let product = {\r\n      title: createProduct.title,\r\n      category: createProduct.category,\r\n      price: createProduct.price,\r\n    }\r\n    await axios\r\n      .post(baseURL + '/products', product)\r\n      .then((res) => {\r\n        getProducts()\r\n        setOpen(false)\r\n        setCreateDialog(false)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n  //   Update Product\r\n  const updateProduct = async () => {\r\n    await axios\r\n      .put(baseURL + '/products' + '/' + createProduct.id, createProduct)\r\n      .then((res) => {\r\n        getProducts()\r\n        setSaveButton(true)\r\n        setUpdateDialog(false)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n  //   Delete product\r\n  const deleteProduct = async () => {\r\n    await axios\r\n      .delete(baseURL + '/products' + '/' + createProduct.id)\r\n      .then((res) => {\r\n        getProducts()\r\n        setDeleteDialog(false)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n    setSaveButton(false)\r\n    setCreateProduct((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }))\r\n  }\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setUpdateDialog(false)\r\n    setDeleteDialog(false)\r\n    setCreateDialog(false)\r\n    setSaveButton(true)\r\n    setOpen(false)\r\n  }\r\n  const selectProduct = (title, type) => {\r\n    setCreateProduct(title)\r\n    if (type === 'Edit') {\r\n      setUpdateDialog(true)\r\n    }\r\n    if (type === 'Delete') {\r\n      setDeleteDialog(true)\r\n    }\r\n  }\r\n\r\n  // Create dialog body\r\n  const createData = (\r\n    <div>\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='title'\r\n        label='Title'\r\n      />\r\n      <FormControl className={styles.inputMaterial}>\r\n        <InputLabel htmlFor='age-native-simple'>Category</InputLabel>\r\n        <Select\r\n          native\r\n          onChange={handleChange}\r\n          inputProps={{\r\n            name: 'category',\r\n          }}\r\n        >\r\n          <option aria-label='None' value='' />\r\n          {categoryData.map((item) => {\r\n            return <option value={item.id}>{item.parent}</option>\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='price'\r\n        label='Price'\r\n      />\r\n    </div>\r\n  )\r\n  // Edit dialog body\r\n  const editData = (\r\n    <div>\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='title'\r\n        label='Title'\r\n        value={createProduct && createProduct.title}\r\n      />\r\n      <FormControl className={styles.inputMaterial}>\r\n        <InputLabel htmlFor='age-native-simple'>Category</InputLabel>\r\n        <Select\r\n          native\r\n          onChange={handleChange}\r\n          value={createProduct && createProduct.category}\r\n          inputProps={{\r\n            name: 'category',\r\n          }}\r\n        >\r\n          <option aria-label='None' value='' />\r\n          {categoryData.map((item) => {\r\n            return <option value={item.id}>{item.parent}</option>\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='price'\r\n        label='Price'\r\n        value={createProduct && createProduct.price}\r\n      />\r\n    </div>\r\n  )\r\n  // Product category => Category parent\r\n  var category = categoryData.reduce(function (acc, cur, i) {\r\n    acc[cur.id] = cur.parent\r\n    return acc\r\n  }, {})\r\n  return (\r\n    <div>\r\n      {/* Category table */}\r\n      <MaterialTable\r\n        style={{ margin: '0px 10px' }}\r\n        title='Product list'\r\n        columns={[\r\n          {\r\n            title: 'Name',\r\n            field: 'title',\r\n            cellStyle: {\r\n              width: 400,\r\n              minWidth: 200,\r\n            },\r\n            headerStyle: {\r\n              width: 400,\r\n              minWidth: 200,\r\n              whiteSpace: 'nowrap',\r\n            },\r\n          },\r\n          {\r\n            title: 'Price',\r\n            field: 'price',\r\n            cellStyle: {\r\n              width: 150,\r\n              minWidth: 80,\r\n            },\r\n            headerStyle: {\r\n              width: 180,\r\n              minWidth: 80,\r\n              whiteSpace: 'nowrap',\r\n            },\r\n          },\r\n          {\r\n            title: 'Category',\r\n            field: 'category',\r\n            lookup: category,\r\n            cellStyle: {\r\n              width: 150,\r\n              minWidth: 80,\r\n            },\r\n            headerStyle: {\r\n              width: 180,\r\n              minWidth: 80,\r\n              whiteSpace: 'nowrap',\r\n            },\r\n          },\r\n        ]}\r\n        data={data}\r\n        actions={[\r\n          {\r\n            icon: 'edit',\r\n            tooltip: 'Edit',\r\n            iconProps: {\r\n              color: 'primary',\r\n            },\r\n            onClick: (event, rowData) => selectProduct(rowData, 'Edit'),\r\n          },\r\n          {\r\n            icon: 'delete',\r\n            tooltip: 'Delete',\r\n            iconProps: {\r\n              color: 'secondary',\r\n            },\r\n            onClick: (event, rowData) => selectProduct(rowData, 'Delete'),\r\n          },\r\n          {\r\n            icon: 'add',\r\n            tooltip: 'Add User',\r\n            isFreeAction: true,\r\n            onClick: () => handleOpen(),\r\n          },\r\n        ]}\r\n        options={{\r\n          paginationType: 'stepped',\r\n          pageSizeOptions: [5, 7, 10, 15, 20],\r\n          exportButton: {\r\n            csv: true,\r\n            pdf: true,\r\n          },\r\n          actionsColumnIndex: -1,\r\n          header: true,\r\n\r\n          headerStyle: {\r\n            backgroundColor: '#01579b',\r\n            color: '#FFF',\r\n          },\r\n        }}\r\n      />\r\n\r\n      {/* Create Dialog */}\r\n      <Dialog className={styles.modal} open={open} onClose={handleClose}>\r\n        <DialogTitle>Create a new product</DialogTitle>\r\n        <DialogContent>{createData}</DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color='secondary'\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => postProduct()}\r\n            color='primary'\r\n            disabled={saveButton}\r\n            className={styles.button}\r\n          >\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog\r\n        className={styles.modal}\r\n        open={updateDialog}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>Update product</DialogTitle>\r\n        <DialogContent>{editData}</DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color='secondary'\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={saveButton}\r\n            onClick={() => updateProduct()}\r\n            color='primary'\r\n            className={styles.button}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Dialog */}\r\n      <Dialog\r\n        className={styles.modal}\r\n        open={deleteDialog}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>Delete product</DialogTitle>\r\n        <DialogContentText\r\n          style={{ width: '400px', padding: 10, textAlign: 'center' }}\r\n        >\r\n          Are you sure you want to delete this product?\r\n        </DialogContentText>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color='secondary'\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => deleteProduct()}\r\n            color='primary'\r\n            className={styles.button}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Category/CategoryList.jsx",["84","85","86","87","88","89"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nconst baseURL = \"http://localhost:5000\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icons: {\r\n    cursor: \"pointer\",\r\n  },\r\n  inputMaterial: {\r\n    marginTop: 20,\r\n    width: \"100%\",\r\n  },\r\n  button: {\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nexport default function CategoryList() {\r\n  const styles = useStyles();\r\n  const [data, setData] = useState([]);\r\n  const [categoryData, setCategoryData] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [createDialog, setCreateDialog] = useState(false);\r\n  const [updateDialog, setUpdateDialog] = useState(false);\r\n  const [deleteDialog, setDeleteDialog] = useState(false);\r\n  const [saveButton, setSaveButton] = useState(true);\r\n\r\n  const [createCategory, setCreateCategory] = useState({\r\n    title: \"\",\r\n    parent: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    getCategory();\r\n  }, []);\r\n  // Get category list\r\n  const getCategory = async () => {\r\n    await axios\r\n      .get(baseURL + \"/category\")\r\n      .then((res) => {\r\n        setCategoryData(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  //   Post Categorys\r\n  const postCategory = async () => {\r\n    let category = {\r\n      title: createCategory.title,\r\n      parent: createCategory.parent,\r\n    };\r\n    await axios\r\n      .post(baseURL + \"/category\", category)\r\n      .then((res) => {\r\n        getCategory();\r\n        setOpen(false);\r\n        setCreateDialog(false);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  //   Update Category\r\n  const updateCategory = async () => {\r\n    await axios\r\n      .put(baseURL + \"/category\" + \"/\" + createCategory.id, createCategory)\r\n      .then((res) => {\r\n        getCategory();\r\n        setSaveButton(true);\r\n        setUpdateDialog(false);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  //   Delete Category\r\n  const deleteCategory = async () => {\r\n    await axios\r\n      .delete(baseURL + \"/category\" + \"/\" + createCategory.id)\r\n      .then((res) => {\r\n        getCategory();\r\n        setDeleteDialog(false);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setSaveButton(false);\r\n    setCreateCategory((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setUpdateDialog(false);\r\n    setDeleteDialog(false);\r\n    setCreateDialog(false);\r\n    setSaveButton(true);\r\n    setOpen(false);\r\n  };\r\n  const selectCategory = (parent, type) => {\r\n    setCreateCategory(parent);\r\n    if (type === \"Edit\") {\r\n      setUpdateDialog(true);\r\n    }\r\n    if (type === \"Delete\") {\r\n      setDeleteDialog(true);\r\n    }\r\n  };\r\n\r\n  // Create dialog data\r\n  const createData = (\r\n    <div>\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name=\"title\"\r\n        label=\"Title\"\r\n      />\r\n      <FormControl className={styles.inputMaterial}>\r\n        <InputLabel htmlFor=\"age-native-simple\">Parent</InputLabel>\r\n        <Select\r\n          native\r\n          onChange={handleChange}\r\n          inputProps={{\r\n            name: \"parent\",\r\n          }}\r\n        >\r\n          <option aria-label=\"None\" value=\"\" />\r\n          {categoryData.map((item) => {\r\n            return <option value={item.parent}>{item.parent}</option>;\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n\r\n  // Edit dialog data\r\n  const editData = (\r\n    <div>\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name=\"title\"\r\n        label=\"Title\"\r\n        value={createCategory && createCategory.title}\r\n      />\r\n      <FormControl className={styles.inputMaterial}>\r\n        <InputLabel htmlFor=\"age-native-simple\">Parent</InputLabel>\r\n        <Select\r\n          native\r\n          onChange={handleChange}\r\n          value={createCategory && createCategory.parent}\r\n          inputProps={{\r\n            name: \"parent\",\r\n          }}\r\n        >\r\n          <option aria-label=\"None\" value=\"\" />\r\n          {categoryData.map((item) => {\r\n            return <option value={item.parent}>{item.parent}</option>;\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n  return (\r\n    <div>\r\n      {/* Category table */}\r\n      <MaterialTable\r\n        style={{ margin: \"0px 10px\" }}\r\n        title=\"Category list\"\r\n        columns={[\r\n          {\r\n            title: \"Name\",\r\n            field: \"title\",\r\n            cellStyle: {\r\n              width: 400,\r\n              minWidth: 200,\r\n            },\r\n            headerStyle: {\r\n              width: 400,\r\n              minWidth: 200,\r\n              whiteSpace: \"nowrap\",\r\n            },\r\n          },\r\n          {\r\n            title: \"Parent\",\r\n            field: \"parent\",\r\n            cellStyle: {\r\n              width: 150,\r\n              minWidth: 80,\r\n            },\r\n            headerStyle: {\r\n              width: 180,\r\n              minWidth: 80,\r\n              whiteSpace: \"nowrap\",\r\n            },\r\n          },\r\n        ]}\r\n        data={categoryData}\r\n        actions={[\r\n          {\r\n            icon: \"edit\",\r\n            tooltip: \"Edit\",\r\n            iconProps: {\r\n              color: \"primary\",\r\n            },\r\n            onClick: (event, rowData) => selectCategory(rowData, \"Edit\"),\r\n          },\r\n          {\r\n            icon: \"delete\",\r\n            tooltip: \"Delete\",\r\n            iconProps: {\r\n              color: \"secondary\",\r\n            },\r\n            onClick: (event, rowData) => selectCategory(rowData, \"Delete\"),\r\n          },\r\n          {\r\n            icon: \"add\",\r\n            tooltip: \"Add User\",\r\n            isFreeAction: true,\r\n            onClick: () => handleOpen(),\r\n          },\r\n        ]}\r\n        options={{\r\n          paginationType: \"stepped\",\r\n          pageSizeOptions: [5, 7, 10, 15, 20],\r\n          exportButton: {\r\n            csv: true,\r\n            pdf: true,\r\n          },\r\n          actionsColumnIndex: -1,\r\n          header: true,\r\n\r\n          headerStyle: {\r\n            backgroundColor: \"#01579b\",\r\n            color: \"#FFF\",\r\n          },\r\n        }}\r\n      />\r\n\r\n      {/* Create Dialog */}\r\n      <Dialog className={styles.modal} open={open} onClose={handleClose}>\r\n        <DialogTitle>Create a new Category</DialogTitle>\r\n        <DialogContent>{createData}</DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color=\"secondary\"\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => postCategory()}\r\n            color=\"primary\"\r\n            disabled={saveButton}\r\n            className={styles.button}\r\n          >\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog\r\n        className={styles.modal}\r\n        open={updateDialog}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>Update Category</DialogTitle>\r\n        <DialogContent>{editData}</DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color=\"secondary\"\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={saveButton}\r\n            onClick={() => updateCategory()}\r\n            color=\"primary\"\r\n            className={styles.button}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Dialog */}\r\n      <Dialog\r\n        className={styles.modal}\r\n        open={deleteDialog}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>Delete Category</DialogTitle>\r\n        <DialogContentText\r\n          style={{ width: \"400px\", padding: 10, textAlign: \"center\" }}\r\n        >\r\n          Are you sure you want to delete this Category?\r\n        </DialogContentText>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color=\"secondary\"\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => deleteCategory()}\r\n            color=\"primary\"\r\n            className={styles.button}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/components/Store/StoreList.jsx",["90","91","92","93","94","95"],"import React, { useState, useEffect } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport axios from 'axios'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Modal from '@material-ui/core/Modal'\r\nimport Button from '@material-ui/core/Button'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount'\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn'\r\nconst columns = [\r\n  {\r\n    title: 'ID',\r\n    field: 'id',\r\n    searchable: false,\r\n    cellStyle: {\r\n      width: 100,\r\n      minWidth: 50,\r\n    },\r\n    headerStyle: {\r\n      width: 100,\r\n      minWidth: 50,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n  },\r\n  {\r\n    title: 'Status',\r\n    field: 'active',\r\n    cellStyle: {\r\n      width: 100,\r\n      minWidth: 60,\r\n    },\r\n    headerStyle: {\r\n      width: 100,\r\n      minWidth: 60,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    render: (rowData) => {\r\n      if (rowData.active) {\r\n        return <SupervisorAccountIcon color='primary' fontSize='large' />\r\n      } else {\r\n        return <SupervisorAccountIcon color='secondary' fontSize='large' />\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: 'Name',\r\n    field: 'title',\r\n    cellStyle: {\r\n      width: 400,\r\n      minWidth: 200,\r\n    },\r\n    headerStyle: {\r\n      width: 400,\r\n      minWidth: 200,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n  },\r\n  {\r\n    title: 'Telephone number',\r\n    field: 'tel',\r\n    cellStyle: {\r\n      width: 150,\r\n      minWidth: 80,\r\n    },\r\n    headerStyle: {\r\n      width: 180,\r\n      minWidth: 80,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n  },\r\n]\r\nconst baseURL = 'http://localhost:5000'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icons: {\r\n    cursor: 'pointer',\r\n  },\r\n  inputMaterial: {\r\n    marginTop: 20,\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    fontWeight: 'bold',\r\n  },\r\n}))\r\n\r\nexport default function StoreList() {\r\n  const styles = useStyles()\r\n  const [data, setData] = useState([])\r\n  const [open, setOpen] = useState(false)\r\n  const [createDialog, setCreateDialog] = useState(false)\r\n  const [updateDialog, setUpdateDialog] = useState(false)\r\n  const [deleteDialog, setDeleteDialog] = useState(false)\r\n  const [saveButton, setSaveButton] = useState(true)\r\n\r\n  const [createStore, setCreateStore] = useState({\r\n    title: '',\r\n    inn: '',\r\n    tel: '',\r\n    active: false,\r\n  })\r\n\r\n  useEffect(() => {\r\n    getStores()\r\n  }, [])\r\n\r\n  //   Get Products\r\n  const getStores = async () => {\r\n    await axios\r\n      .get(baseURL + '/stores')\r\n      .then((res) => {\r\n        setData(res.data)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n  //   Post Products\r\n  const postStores = async () => {\r\n    await axios\r\n      .post(baseURL + '/stores', createStore)\r\n      .then((res) => {\r\n        // setData(data.concat(res.data));\r\n        getStores()\r\n        setOpen(false)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n  //   Update Product\r\n  const updateStore = async () => {\r\n    await axios\r\n      .put(baseURL + '/stores' + '/' + createStore.id, createStore)\r\n      .then((res) => {\r\n        // let putData = res;\r\n        // console.log(putData);\r\n        // setData(putData);\r\n        getStores()\r\n        setUpdateDialog(false)\r\n        setSaveButton(true)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n  //   Delete product\r\n  const deleteStore = async () => {\r\n    await axios\r\n      .delete(baseURL + '/stores' + '/' + createStore.id)\r\n      .then((res) => {\r\n        // let newData = res.data;\r\n        // setData(newData);\r\n        getStores()\r\n        setDeleteDialog(false)\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n    setSaveButton(false)\r\n    setCreateStore((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }))\r\n  }\r\n  const handleChangeSwitch = (event) => {\r\n    setSaveButton(false)\r\n    setCreateStore({\r\n      ...createStore,\r\n      [event.target.name]: event.target.checked,\r\n    })\r\n  }\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setUpdateDialog(false)\r\n    setDeleteDialog(false)\r\n    setSaveButton(true)\r\n    setOpen(false)\r\n  }\r\n  const selectStore = (title, type) => {\r\n    setCreateStore(title)\r\n    if (type === 'Edit') {\r\n      setUpdateDialog(true)\r\n    }\r\n    if (type === 'Delete') {\r\n      setDeleteDialog(true)\r\n    }\r\n  }\r\n\r\n  const createData = (\r\n    <div>\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='title'\r\n        label='Title'\r\n      />\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='inn'\r\n        label='STIR'\r\n      />\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='tel'\r\n        label='Telephone number'\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={createStore.active}\r\n            onChange={handleChangeSwitch}\r\n            name='active'\r\n            color='primary'\r\n          />\r\n        }\r\n        label='Status'\r\n      />\r\n    </div>\r\n  )\r\n  const editData = (\r\n    <div>\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='title'\r\n        label='Title'\r\n        value={createStore && createStore.title}\r\n      />\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='inn'\r\n        label='STIR'\r\n        value={createStore && createStore.inn}\r\n      />\r\n      <TextField\r\n        className={styles.inputMaterial}\r\n        onChange={handleChange}\r\n        name='tel'\r\n        label='Telephone number'\r\n        value={createStore && createStore.tel}\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={createStore.active}\r\n            onChange={handleChangeSwitch}\r\n            name='active'\r\n            color='primary'\r\n          />\r\n        }\r\n        label='Status'\r\n      />\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        style={{ margin: '0px 10px' }}\r\n        title='Store list'\r\n        columns={columns}\r\n        data={data}\r\n        actions={[\r\n          {\r\n            icon: 'edit',\r\n            tooltip: 'Edit',\r\n            iconProps: {\r\n              color: 'primary',\r\n            },\r\n            onClick: (event, rowData) => selectStore(rowData, 'Edit'),\r\n          },\r\n          {\r\n            icon: 'delete',\r\n            tooltip: 'Delete',\r\n            iconProps: {\r\n              color: 'secondary',\r\n            },\r\n            onClick: (event, rowData) => selectStore(rowData, 'Delete'),\r\n          },\r\n          {\r\n            icon: 'add',\r\n            tooltip: 'Add Store',\r\n            isFreeAction: true,\r\n            onClick: () => handleOpen(),\r\n          },\r\n          {\r\n            icon: 'refresh',\r\n            tooltip: 'Refresh Data',\r\n            isFreeAction: true,\r\n            onClick: () => getStores(),\r\n          },\r\n        ]}\r\n        options={{\r\n          paginationType: 'stepped',\r\n          pageSizeOptions: [5, 7, 10, 15, 20],\r\n          exportButton: {\r\n            csv: true,\r\n            pdf: true,\r\n          },\r\n          actionsColumnIndex: -1,\r\n          header: true,\r\n\r\n          headerStyle: {\r\n            backgroundColor: '#01579b',\r\n            color: '#FFF',\r\n          },\r\n        }}\r\n      />\r\n\r\n      {/* Create Dialog */}\r\n      <Dialog className={styles.modal} open={open} onClose={handleClose}>\r\n        <DialogTitle>Create a new Store</DialogTitle>\r\n        <DialogContent>{createData}</DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color='secondary'\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => postStores()}\r\n            color='primary'\r\n            className={styles.button}\r\n          >\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog\r\n        className={styles.modal}\r\n        open={updateDialog}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>Update store</DialogTitle>\r\n        <DialogContent>{editData}</DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color='secondary'\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={saveButton}\r\n            onClick={() => updateStore()}\r\n            color='primary'\r\n            className={styles.button}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Dialog */}\r\n      <Dialog\r\n        className={styles.modal}\r\n        open={deleteDialog}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>Delete store</DialogTitle>\r\n        <DialogContentText\r\n          style={{ width: '400px', padding: 10, textAlign: 'center' }}\r\n        >\r\n          Are you sure you want to delete this store?\r\n        </DialogContentText>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            color='secondary'\r\n            className={styles.button}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => deleteStore()}\r\n            color='primary'\r\n            className={styles.button}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/Stores/StoreItems.jsx",[],"/Users/jahongirhusanov/Desktop/webDevelopment_UDEMY/REACT/order-app-beki/src/containers/SignIn/SignIn.jsx",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":5,"column":8,"nodeType":"102","messageId":"103","endLine":5,"endColumn":13},{"ruleId":"100","severity":1,"message":"104","line":37,"column":10,"nodeType":"102","messageId":"103","endLine":37,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":89,"column":34,"nodeType":"107","messageId":"108","endLine":89,"endColumn":35},{"ruleId":"105","severity":1,"message":"106","line":100,"column":37,"nodeType":"107","messageId":"108","endLine":100,"endColumn":38},{"ruleId":"100","severity":1,"message":"101","line":5,"column":8,"nodeType":"102","messageId":"103","endLine":5,"endColumn":13},{"ruleId":"100","severity":1,"message":"109","line":34,"column":10,"nodeType":"102","messageId":"103","endLine":34,"endColumn":14},{"ruleId":"100","severity":1,"message":"110","line":34,"column":16,"nodeType":"102","messageId":"103","endLine":34,"endColumn":23},{"ruleId":"100","severity":1,"message":"104","line":37,"column":10,"nodeType":"102","messageId":"103","endLine":37,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":78,"column":34,"nodeType":"107","messageId":"108","endLine":78,"endColumn":35},{"ruleId":"105","severity":1,"message":"106","line":89,"column":37,"nodeType":"107","messageId":"108","endLine":89,"endColumn":38},{"ruleId":"100","severity":1,"message":"101","line":5,"column":8,"nodeType":"102","messageId":"103","endLine":5,"endColumn":13},{"ruleId":"100","severity":1,"message":"111","line":16,"column":8,"nodeType":"102","messageId":"103","endLine":16,"endColumn":26},{"ruleId":"100","severity":1,"message":"104","line":98,"column":10,"nodeType":"102","messageId":"103","endLine":98,"endColumn":22},{"ruleId":"100","severity":1,"message":"112","line":98,"column":24,"nodeType":"102","messageId":"103","endLine":98,"endColumn":39},{"ruleId":"105","severity":1,"message":"106","line":137,"column":32,"nodeType":"107","messageId":"108","endLine":137,"endColumn":33},{"ruleId":"105","severity":1,"message":"106","line":151,"column":35,"nodeType":"107","messageId":"108","endLine":151,"endColumn":36},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'createDialog' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'MonetizationOnIcon' is defined but never used.","'setCreateDialog' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]